1、分层架构
[宿主]：主要要是生成的app，根据要生成的App目标类型不同（可以分为完整版、极速版、Pad版、物联网版等），主界面的框架代码可以考虑放到这里
[业务层]：具体业务的功能模块，业务层模块尽量保持独立。一般业务层模块需要依赖UI模块搭建业务界面、依赖容器层功能构建业务逻辑。业务之间可以互相调用，通过组件间的通信方式来实现（例如ARouter的service和router）
[容器层、UI组件库]：主要针对业务层提供标准的接口与调用路径，形成抽象的容器层，让业务层感知不到下层的变化（例如：可以动态切换图片库、视频库等）；UI组件库用于提供统一的UI部件给业务层，后续可以在UI层统一控制所有业务层UI
[能力扩展层]：在基础库上进行的封装，带有项目和业务特色（例如登陆、支付等），主要作用是封装功能，为业务层提供统一的接口
[基础库]：第三方或自研的工具库，与业务特点无关，可以移植到任何项目中，可以进行开源。
[框架库]：支撑项目运行起来的系统基础库，包括android、androidx、kotlin，其中utils是对系统函数的封装，放在这里仍然代表了系统基础库（只不过其他项目不用再进行封装了）

Q: 要解决的问题之一，是上层不直接依赖下层，通过统一库export来控制（这不现实，因为下层不应该统一暴露给上层某一个模块！！！！）
Q: 要解决的问题之二，依赖传递问题，implementation代表了引用一个库，只在本库内部引用；api代表了引用一个库，还需要在本库中对外导出
Q: 要解决的问题之三，有一些基础公共库，应该对全局开放可见，那么应该把他放到公共引用中，例如 library_template.gradle 中的dependencies（设计模块单独的gradle和共享gradle）
Q: 要解决的问题之四，每一层如何向上提供接口，可以采用统一入口，利用依赖注入，将关键能力引入，形成一个外观类（仅仅解决扩展层接口统一暴露）
Q: 要解决的问题之五，单一模块，不要依赖全部的模块，因为后续分不清一个模块真正的依赖谁

2、Archive上传 & aar打包
Q: 要解决的问题之一，项目代码像产品一样发布和使用，这样在自己的代码上传、版本管理、代码引用方面都做到了规范化
Q: 要解决的问题之二，是maven可以集中管理所有的仓库，包括私有的和代理公有的，还可以定义使用仓库的顺序。如果公司要求不能使用外网，搭建一个私服是一个很好的方案
Q: 要解决的问题之三，是maven可以集中设置vpn和代理，提升依赖库的下载速度。当然也可以添加aliyun私服，速度是非常不错的

3、业务组件化
Q: 要解决的问题之一，拆分业务组件，可以独立开发、独立测试、独立打包
Q: 要解决的问题之二，组件之间相互隔离，建立通信机制
Q: 要解决的问题之三，组件独立与嵌入，需要轻松的编译切换
解决问题：开发时相互独立、编译时互相依赖、可独立运行、能互相通信
技术方案：1、为了相互独立，又互相依赖，需要利用gradle插件，在构建的Configration或者assemble阶段动态配置apply和dependencies
        2、为了能独立运行，需要抽离组件的初始化代码，在两个Application中运行，这里采用了Transform在class到dex阶段读取IApplicaionLike类，动态注入到Applicatoin中（开发标记annotation、dex提取插桩）
        3、为了能相互通信，采用了services下沉，同时将各个组件注入到services中；采用了Activity标注Annotation，在构建的编译阶段动态生产javapoet生成java代码，生成跳转的路由map表

Q: 如何使用注解，生成路由Map代码
解决方案：annotaion、apt、javapoet
Q: gradle插件和注解处理都是动态改代码，有什么区别
答案：gradle插件发生在构建时期，同时注册了一个Transform，其发生在class到dex的转化时期，这个时期可以使用javassit和asm修改字节码
     注解处理器发生在编译阶段，即java到class的阶段，这个阶段可以使用javapoet动态生存java代码

Q: 路由较难使用改用ARouter，主要是跳转的装包、拆包处理不好，而且不支持拦截器


4、app基础搭建
Q: 物理架搭好之后，其他模块的搭建顺序怎么确定（先做一个核心app，然后不断扩张演化，建议前后端全部自己搭建）
A、核心app包括：网络、异步+携程、图片、界面、闪屏、更新、登陆、权限、埋点等 （基础混淆、签名、基础权限）
   1⃣️ 为了搭建出核心功能，只需要网络、图片、闪屏、更新、权限、崩溃功能
   2⃣️ 完成之后，在进行界面、登陆、埋点功能完善
B、业务逻辑编程范式：视图、逻辑、数据；   目录拆分；
C、演化版本：推送、im、视频通话、换肤、下载、上传、支付、分享
D、复杂架构：多进程、插件、多端



5、核心模块的搭建
    A、网络的搭建
      网路库的配置（okhttp混淆 ✅、retrofit不需要混淆 ✅、初始化、改良cancel、改良多baseUrl）
      接口Mock的解决方案，本地文件响应的解决方案
      编写demo用例代码，方便找到合适的样板
      网络库的架构分层

      选用OKHttp、Rettrofit，应用层在加上RxJava和kotlin协程两种
      选用纯粹的HttpUrlConnection库，用于后续的独立sdk编写


    B、图片库Glide搭建 ✅
      图片缓存配置、圆角等配置、图片url的封装
      网络库的架构分层
      网路库的配置

    C、基础界面的搭建
      首页搭建
      基础业务UI库搭建


6、主要页面搭建



7、业务编程范式



8、行业常见解决方案



9、Flutter与插件化