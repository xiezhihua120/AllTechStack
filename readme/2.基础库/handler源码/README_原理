生产消费模式：参考 https://www.processon.com/view/link/621d93187d9c0806f2ccf2fe

————————————————————————————————————————————————————————————————————————————————————————————————————
Looper
[客户]							[自己]							[下游]

prepareMainLooper
getMainLooper
setObserver
								Looper
								prepare
myLooper
myQueue
isCurrentThread

setMessageLogging
setTraceTag
setSlowLogThresholdMs

prepare
loop							loop
quit
quitSafely

getThread
getQueue

核心逻辑：Looper、prepare、loop
1、[构造函数]
  其中主要是构建了一个Looper对象，当中核心的成员变量是一个MessageQueue

2、[prepare函数]
  构造了一个Looper对象，并放到了ThreadLocal中，即当前所在线程的ThreadLocalMap中（调用prepare的线程）
  备注：prepareMainLooper其实也是初始化Looper到Thread中，并且标记当前线程是MainLooper（sMainLooper = myLooper()）

3、[loop函数]
    public static void loop() {
        // Todo: 第一步，取出Looper和MessageQueue
        final Looper me = myLooper();
        final MessageQueue queue = me.mQueue;

        boolean slowDeliveryDetected = false;

        for (;;) {
            // Todo: 第二步，取出MessageQueue中的消息，会阻塞
            Message msg = queue.next(); // might block
            if (msg == null) return;

            final Printer logging = me.mLogging;
            if (logging != null) logging.println(">>>>> Dispatching to " + msg.target + " " +msg.callback + ": " + msg.what);

            final Observer observer = sObserver;

            final long dispatchStart = needStartTime ? SystemClock.uptimeMillis() : 0;
            final long dispatchEnd;
            Object token = null;
            if (observer != null) {
                token = observer.messageDispatchStarting();
            }
            long origWorkSource = ThreadLocalWorkSource.setUid(msg.workSourceUid);
            try {
                // Todo: 第三步，消息和消费者连接，开始分发消息
                msg.target.dispatchMessage(msg);
                if (observer != null) {
                    observer.messageDispatched(token, msg);
                }
                dispatchEnd = needEndTime ? SystemClock.uptimeMillis() : 0;
            } catch (Exception exception) {
                if (observer != null) {
                    observer.dispatchingThrewException(token, msg, exception);
                }
                throw exception;
            } finally {
                ThreadLocalWorkSource.restore(origWorkSource);
            }

            if (logging != null) {
                logging.println("<<<<< Finished to " + msg.target + " " + msg.callback);
            }

            msg.recycleUnchecked();
        }
    }
————————————————————————————————————————————————————————————————————————————————————————————————————
Message
    public final class Message implements Parcelable {
        public int what;            // 消息code
        public int arg1;            // 数据data1
        public int arg2;            // 数据data2
        public Object obj;          // 数据data
        public Messenger replyTo;   // 订阅者subscriber

        Bundle data;                // 数据data
        Handler target;             // 订阅者subscriber
        Runnable callback;          // 行为action
        Message next;               // 链式消息
    }

    public static Message obtain(Handler h, int what, int arg1, int arg2, Object obj)
    public static Message obtain(Handler h, Runnable callback)
    分析：本身就只是一个消息数据封装，对应生产消费模型中的事件

————————————————————————————————————————————————————————————————————————————————————————————————————
Messenger
    public final class Messenger implements Parcelable {
        private final IMessenger mTarget;

        public Messenger(Handler target) {
            mTarget = target.getIMessenger();
        }

        public void send(Message message) throws RemoteException {
            mTarget.send(message);
        }

        public IBinder getBinder() {
            return mTarget.asBinder();
        }
    }
    分析： Messenger <- IMessenger <- Handler
                                 发送
                           proxy      stub

————————————————————————————————————————————————————————————————————————————————————————————————————
Handler
[客户]										[自己]										[下游]

dispatchMessage
											public Handler()
											public Handler(Callback callback)
											public Handler(Looper looper, Callback callback)
getMain

obtainMessage

post
postAtTime
postDelayed
postAtFrontOfQueue

sendMessage
sendEmptyMessage
sendEmptyMessageDelayed
sendEmptyMessageAtTime
sendMessageDelayed
sendMessageAtTime
sendMessageAtFrontOfQueue
											enqueueMessage
removeCallbacks
removeMessages
removeCallbacksAndMessages

hasMessages
hasMessagesOrCallbacks
hasCallbacks

分析：如同EventBus，其实就是一个事件总线，但又集成了生产者、消费者接口
     1、封装消息，将Message与Callback、Message与callback封装在一起
     2、生产消息发送到消息队列中
     3、投递器取出消息并分发

final IMessenger getIMessenger() {
    synchronized (mQueue) {
        if (mMessenger != null) {
            return mMessenger;
        }
        mMessenger = new MessengerImpl();
        return mMessenger;
    }
}

private final class MessengerImpl extends IMessenger.Stub {
    public void send(Message msg) {
        msg.sendingUid = Binder.getCallingUid();
        Handler.this.sendMessage(msg);
    }
}
分析：跨进程的消息发送，其实是实现了一个IMessager.Stub

————————————————————————————————————————————————————————————————————————————————————————————————————
MessageQueue
[客户]										[自己]										[下游]
											MessageQueue
finalize
isIdle
addIdleHandler
removeIdleHandler
isPolling
											dispatchEvents
enqueueMessage *
next *

hasMessages
removeMessages
removeCallbacksAndMessages
											removeAllMessagesLocked
											removeAllFutureMessagesLocked
分析：从消息队列的管理：插入、取出、移除, 重点分析enqueueMessage、next、hasMessages、removeMessages几个函数


————————————————————————————————————————————————————————————————————————————————————————————————————
HandlerThread

public class HandlerThread extends Thread {
    int mPriority;
    int mTid = -1;
    Looper mLooper;
    private @Nullable Handler mHandler;

    public HandlerThread(String name) {
        super(name);
        mPriority = Process.THREAD_PRIORITY_DEFAULT;
    }

    public HandlerThread(String name, int priority) {
        super(name);
        mPriority = priority;
    }

    protected void onLooperPrepared() {
    }

    @Override
    public void run() {
        mTid = Process.myTid();
        Looper.prepare();
        synchronized (this) {
            mLooper = Looper.myLooper();
            notifyAll();
        }
        Process.setThreadPriority(mPriority);
        onLooperPrepared();
        Looper.loop();
        mTid = -1;
    }

    public Looper getLooper() {
        if (!isAlive()) {
            return null;
        }

        synchronized (this) {
            while (isAlive() && mLooper == null) {
                try {
                    wait();
                } catch (InterruptedException e) {
                }
            }
        }
        return mLooper;
    }

    public Handler getThreadHandler() {
        if (mHandler == null) {
            mHandler = new Handler(getLooper());
        }
        return mHandler;
    }
}