public class BackgroundPoster implements Runnable {

    private final PendingPostQueue queue;
    private final EventBus eventBus;

    private volatile boolean executorRunning;

    BackgroundPoster(EventBus eventBus) {
        this.eventBus = eventBus;
        queue = new PendingPostQueue();
    }

    public void enqueue(Subscription subscription, Object event) {
        PendingPost pendingPost = PendingPost.obtainPendingPost(subscription, event);
        synchronized (this) {
            queue.enqueue(pendingPost);
            if (!executorRunning) {
                executorRunning = true;
                eventBus.getExecutorService().execute(this);
            }
        }
    }

    @Override
    public void run() {
        try {
            try {
                while (true) {
                    PendingPost pendingPost = queue.poll(1000);
                    if (pendingPost == null) {
                        synchronized (this) {
                            // Check again, this time in synchronized
                            pendingPost = queue.poll();
                            if (pendingPost == null) {
                                executorRunning = false;
                                return;
                            }
                        }
                    }
                    eventBus.invokeSubscriber(pendingPost);
                }
            } catch (InterruptedException e) {
                Log.w("Event", Thread.currentThread().getName() + " was interruppted", e);
            }
        } finally {
            executorRunning = false;
        }
    }

}

----------------------------------------------------------------------------------------------------
生产消费模式：生产者、事件、队列缓存、投递器、消费者
1、生产者将时间插入队列
    public void enqueue(Subscription subscription, Object event) {
        PendingPost pendingPost = PendingPost.obtainPendingPost(subscription, event);
        synchronized (this) {
            queue.enqueue(pendingPost);
            if (!executorRunning) {
                executorRunning = true;
                eventBus.getExecutorService().execute(this);
            }
        }
    }
2、投递器取队列
    public void run() {
        try {
            try {
                while (true) {
                    PendingPost pendingPost = queue.poll(1000);
                    if (pendingPost == null) {
                        synchronized (this) {
                            // Check again, this time in synchronized
                            pendingPost = queue.poll();
                            if (pendingPost == null) {
                                executorRunning = false;
                                return;
                            }
                        }
                    }
                    eventBus.invokeSubscriber(pendingPost);
                }
            } catch (InterruptedException e) {
                Log.w("Event", Thread.currentThread().getName() + " was interruppted", e);
            }
        } finally {
            executorRunning = false;
        }
    }
3、消费者执行
    eventBus.invokeSubscriber(pendingPost);

————————————————————————————————————————————————————————————————————————————————————————————————————

生产者  Publisher
事件      Event
队列      Queue
投递器   Executor
消费者   Subscriber

Public class EventPoster extends Runnable {

	public void enqueue(Object event, Subscription sunscription) {
		PendingPost pendingPost = PendingPost.abtain(event, subscription);
                 synchronized(this) {
			queue.enqueue(pendingPost)
			if (!running) {
				running = true;
				executor.execute(this)
			}
		}
	}

	public void run() {
	    try {
            while(true) {
                PendingPost pendingPost = queue.poll(1000);
                if (pendingPost != null) {
                    invokeSubscriber(pendingPost)
                } else {
                    synchronized(this) {
                        pendingPost = queue.poll();
                        if (pendingPost == null) {
                            running = false;
                            return;
                        } else {
                            invokeSubscriber(pendingPost)
                        }
                    }
                }
            }
	    } catch(Exception e) {
            e.printStack();
            running = false
	    }
    }

}


