EventBus: Events for Android
官网：https://greenrobot.org/eventbus/
     https://github.com/greenrobot/EventBus


EventBus 3.0初探: 入门使用及其使用 完全解析
https://www.jianshu.com/p/acfe78296bb5


EventBus 3.0进阶：源码及其设计模式 完全解析
https://www.jianshu.com/p/bda4ed3017ba

————————————————————————————————————————————————————————————————————————————————————————————————————

What：
EventBus是一个中央型的订阅-发布系统。发布者发送事件到总线上，总线收到事件后，分发给订阅者。里面主要有两个问题
1、事件总线如何做事件-订阅者的匹配
2、订阅者如何接受处理事件
从数据流向的角度来看，数据送到订阅者，其实很像函数处理的过程：入参是输入、函数代表处理。因此定义好一个函数即定义了一个观察者。
其中的入参就是订阅者关心的事件，而事件总线也是去找订阅者的函数入参类型做匹配！因此这样就解决了以上两个问题

Why：
解决特定场景下的订阅发布功能，实现了一个极简的发布-订阅小系统，实现了发布订阅解耦、支持订阅线程、支持订阅优先级等等

How：系统解构
生产者  Publisher
事件      Event
队列      Queue
投递器   Executor
消费者   Subscriber

生产者     ->    事件     ->      信封
                                队列
                                投递器     ->     消费者
67
从数据流向倒推：

事件  ->  事件类型

                [事件类型，订阅(订阅者+方法)]

							->   方法.invoke(订阅者， 事件)

————————————————————————————————————————————————————————————————————————————————————————————————————
EventBus

EventBusBuilder： 参数容器

ThreadLocal<PostingThreadState>：  Map<Thread, ThreadLocals>  data
                  逻辑上，认为它是一个map，key是线程，value是数据容器，这样可以把不同线程的数据隔离起来。实际上这个
                  map不存在，获取Thread.currentThread()，把数据容器放到Thread上即可

HandlerPoster：
	PendingPostQueue： 一个Pending队列
	PendingPost：一个待发送的消息，包括事件、订阅
	Subscription：一个订阅，包括订阅者、方法
	SubscriberMethod：一个订阅方法，描述了方法、线程模式、事件类型、优先级、粘性标记、方法字符串

BackgroundPoster：后台投递器

AsyncPoster：异步投递器

SubscriberMethodFinder：根据订阅者，查询其订阅方法

————————————————————————————————————————————————————————————————————————————————————————————————————

代码动态运行时：
1、查询订阅者所有的订阅方法：METHOD_CACHE
   遍历所有方法，找到带@Subscribe注解的方法

2、构建订阅者-事件关系：typesBySubscriber
   订阅者      事件类型
              事件类型
              事件类型

3、构建事件-订阅关系：subscriptionsByEventType
   事件类型     订阅
              订阅
              订阅

————————————————————————————————————————————————————————————————————————————————————————————————————

数据的存储：
从配置的角度看，主要是三张实体关系表，EventType、Subscription、Subscriber

[EventType]
Id
name

[Subscription]
id
eventTypeId
subscriberId
subscriberMethodId

[Subscriber]
id
name

参考实体关系分析：https://www.processon.com/view/link/621722e87d9c081053d007ee

————————————————————————————————————————————————————————————————————————————————————————————————————

构建实体关系：
订阅者在注册时，通过反射获取类所有的方法，在方法中查找@Subscribe方法，提取EventType
1、获取方法：clazz.getDeclaredMethods()
2、获取参数：method.getParameterTypes()
3、获取注解：method.getAnnotation(Subscribe.class)
4、注解属性：subscribeAnnotation.priority()

private void findUsingReflectionInSingleClass(FindState findState) {
        Method[] methods;
        try {
            // This is faster than getMethods, especially when subscribers are fat classes like Activities
            methods = findState.clazz.getDeclaredMethods();
        } catch (Throwable th) {
            // Workaround for java.lang.NoClassDefFoundError, see https://github.com/greenrobot/EventBus/issues/149
            methods = findState.clazz.getMethods();
            findState.skipSuperClasses = true;
        }
        for (Method method : methods) {
            int modifiers = method.getModifiers();
            if ((modifiers & Modifier.PUBLIC) != 0 && (modifiers & MODIFIERS_IGNORE) == 0) {
                Class<?>[] parameterTypes = method.getParameterTypes();
                if (parameterTypes.length == 1) {
                    Subscribe subscribeAnnotation = method.getAnnotation(Subscribe.class);
                    if (subscribeAnnotation != null) {
                        Class<?> eventType = parameterTypes[0];
                        if (findState.checkAdd(method, eventType)) {
                            ThreadMode threadMode = subscribeAnnotation.threadMode();
                            findState.subscriberMethods.add(new SubscriberMethod(method, eventType, threadMode,
                                    subscribeAnnotation.priority(), subscribeAnnotation.sticky()));
                        }
                    }
                } else if (strictMethodVerification && method.isAnnotationPresent(Subscribe.class)) {
                    String methodName = method.getDeclaringClass().getName() + "." + method.getName();
                    throw new EventBusException("@Subscribe method " + methodName +
                            "must have exactly 1 parameter but has " + parameterTypes.length);
                }
            } else if (strictMethodVerification && method.isAnnotationPresent(Subscribe.class)) {
                String methodName = method.getDeclaringClass().getName() + "." + method.getName();
                throw new EventBusException(methodName +
                        " is a illegal @Subscribe method: must be public, non-static, and non-abstract");
            }
        }
    }